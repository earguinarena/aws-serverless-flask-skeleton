# serverless.yml

service: aws-serverles-skeleton

plugins:
  - serverless-python-requirements
  - serverless-wsgi

package:
  exclude:
    - node_modules/**
    - venv/**
    - __pycache__/**
    - .idea/**
    - .vscode/**
    - package.json
    - package-lock.json
    - README.md

custom:
  wsgi:
    app: application.app
    packRequirements: false
  pythonRequirements:
    #dockerizePip: non-linux
    layer: true
  exampleTable: "${self:provider.stage}-Example"
  bucket: "example12345"

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 512
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ExampleTableDynamoDB", "Arn"] }


#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#        - "s3:PutObjectTagging"
#        - "s3:GetObject"
#        - "s3:GetObjectTagging"
#        - "s3:ListBucket"
#        - "s3:DeleteObject"
#        - "s3:DeleteObjectTagging"
#        - "s3:GetBucketNotification"
#        - "s3:PutBucketNotification"
#      Resource:
#        - !Join ["", [!GetAtt S3Bucket.Arn, ""]]
#        - !Join ["", [!GetAtt S3Bucket.Arn, "/*"]]

  environment:
    EXAMPLE_TABLE: ${self:custom.exampleTable}


functions:
  mainHandler:
    handler: wsgi_handler.handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http:
          method: any
          path: /{proxy+}
          cors: true
## comment to disable api gateway authorizer
## ---->>
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
## <<----
      - http:
          method: any
          path: /
          cors: true
## comment to disable api gateway authorizer
## ---->>
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
## <<----

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-${self:service}
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: true
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: true
            Required: true
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        Policies:
          PasswordPolicy:
            RequireLowercase: false
            RequireSymbols: false
            RequireNumbers: false
            MinimumLength: 8
            RequireUppercase: false
    FrontendUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: frontend-app
        GenerateSecret: false
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH #login aws cli
          - ALLOW_REFRESH_TOKEN_AUTH

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

    ExampleTableDynamoDB:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.exampleTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
#          - AttributeName: date
#            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
#          - AttributeName: date
#            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

#    S3Bucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: ${self:custom.bucket}
#        CorsConfiguration:
#          CorsRules:
#            - AllowedHeaders: ["*"]
#              AllowedMethods: [GET, PUT]
#              AllowedOrigins: ["*"]
#              Id: CORSRuleId1
#              MaxAge: "3600"
